This problem was asked by Uber.

Given an array of integers, return a new array such that each element at index i of the new array is the product of all the numbers in the original array except the one at i.

For example, if our input was [1, 2, 3, 4, 5], the expected output would be [120, 60, 40, 30, 24]. If our input was [3, 2, 1], the expected output would be [2, 3, 6].

Follow-up: what if you can't use division?

Following solution is having similar as for trapping rainwater problem . 
In this i have used two arrays left and right which will maintain left side product til now not including that element and same for right as well.

                                         Contributed by Divyansh Gupta
					          (PEC Chandigarh)

#include <iostream>
using namespace std;
#include<algorithm>
void productArray(int *arr,int n)
{
    int left[n]={};
    int right[n]={};
    std::fill_n(left,n,1);
    std::fill_n(right,n,1);
    left[0]=1;
    right[0]=1;
    for(int i=1;i<n;i++){
        left[i]=left[i-1]*arr[i-1];
    }
    for(int i=n-2;i>=0;i--){
        right[i]=arr[i+1]*right[i+1];
    }
    
    for(int i=0;i<n;i++){
        arr[i]=left[i]*right[i];
    }
}

int main()
{
    int t;
    cin>>t;
    while(t>0)
	//code
	{
	    int n;
	    cin>>n;
	    int arr[n];
	   for(int i=0;i<n;i++)
	   {
	       cin>>arr[i];
	   }
	   
	   productArray(arr,n);
	   for(int i=0;i<n;i++){
	       cout<<arr[i]<<" ";
	   }
	   cout<<endl;
	   t--;
	}
	return 0;
}
